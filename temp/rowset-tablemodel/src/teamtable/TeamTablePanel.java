
package teamtable;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.RowSet;
import javax.sql.rowset.CachedRowSet;
import javax.sql.rowset.spi.SyncProviderException;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose
 */
public class TeamTablePanel extends javax.swing.JPanel {

    /**
     * Creates new form TeamTablePanel
     */
    public TeamTablePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        header = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        table.setFillsViewportHeight(true);
        scrollPane.setViewportView(table);

        add(scrollPane, java.awt.BorderLayout.CENTER);

        header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        header.setText("List");
        header.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(header, java.awt.BorderLayout.NORTH);

        addButton.setText("Add");
        buttonPanel.add(addButton);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(saveButton);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(removeButton);

        add(buttonPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            ((CachedRowSet)this.rowSet).acceptChanges();
            ((CachedRowSet)this.rowSet).execute();
            JOptionPane.showMessageDialog(this, "Save successful");
        } catch (SyncProviderException ex) {
            Logger.getLogger(TeamTablePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TeamTablePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        try {
            int row = table.getSelectedRow();
            if (row != -1) {
                rowSet.absolute(row+1);
                rowSet.deleteRow();
                ((CachedRowSet)this.rowSet).acceptChanges();
                ((CachedRowSet)this.rowSet).execute();
                //tableModel.removeRow(row);
                table.updateUI();
                JOptionPane.showMessageDialog(this, "Remove successful");
            }
        } catch (SyncProviderException ex) {
            Logger.getLogger(TeamTablePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TeamTablePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_removeButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel header;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
   
    private RowSet rowSet;

    /**
     * Get the value of rowSet
     *
     * @return the value of rowSet
     */
    public RowSet getRowSet() {
        return rowSet;
    }

    /**
     * Set the value of rowSet
     *
     * @param rowSet new value of rowSet
     * @throws java.sql.SQLException
     */
    public void setRowSet(RowSet rowSet) throws SQLException {
        this.rowSet = rowSet;
        this.tableModel = new TeamTableRowsetModel(rowSet);
        this.table.setModel(tableModel);
        this.validate();
    }
 
    private TeamTableRowsetModel tableModel;

    /**
     * Get the value of tableModel
     *
     * @return the value of tableModel
     */
    public TeamTableRowsetModel getTableModel() {
        return tableModel;
    }

    /**
     * Set the value of tableModel
     *
     * @param tableModel new value of tableModel
     */
    public void setTableModel(TeamTableRowsetModel tableModel) {
        this.tableModel = tableModel;
    }

}
