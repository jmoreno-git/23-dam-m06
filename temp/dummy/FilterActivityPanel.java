package cat.proven.leisure.filter;

import cat.proven.leisure.model.Activity;
import cat.proven.leisure.model.LeisureService;
import java.awt.Component;
import java.lang.System.Logger;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author jmorenp
 */
public class FilterActivityPanel extends javax.swing.JPanel {

    private final ComboBoxModel<String> cbModel;
    private final List<Activity> activityList;

    /**
     * Creates new form FilterActivityPanel
     */
    public FilterActivityPanel() {
        LeisureService dataService = new LeisureService();
        activityList = dataService.getAllActivities();
        cbModel = new ActivityComboBoxModel();
        initComponents();
//        cbActivities.setSelectedIndex(0);
//        cbActivities.setRenderer(new ActivityComboBoxRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbActivity = new javax.swing.JLabel();
        cbActivities = new javax.swing.JComboBox<>();

        lbActivity.setText("Activity: ");

        cbActivities.setModel(cbModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lbActivity)
                .addGap(34, 34, 34)
                .addComponent(cbActivities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(220, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbActivity)
                    .addComponent(cbActivities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbActivities;
    private javax.swing.JLabel lbActivity;
    // End of variables declaration//GEN-END:variables

    class ActivityComboBoxModel extends DefaultComboBoxModel<String> {

        public ActivityComboBoxModel() {
            System.out.println("activityList: "+activityList);
            addAll(activityList
                    .stream()
                    .map((t) -> t.getName())
                    .collect(Collectors.toList())
            );
            setSelectedItem(getElementAt(0));
        }

    }

    class ActivityComboBoxRenderer extends JLabel implements ListCellRenderer<Activity> {

        @Override
        public Component getListCellRendererComponent(
                JList<? extends Activity> list, Activity value, int index,
                boolean isSelected, boolean cellHasFocus) {
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setText(value.getName());
            return this;
        }

    }

}
